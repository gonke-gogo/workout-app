// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/workout.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkoutService_CreateWorkout_FullMethodName            = "/workout.WorkoutService/CreateWorkout"
	WorkoutService_GetWorkout_FullMethodName               = "/workout.WorkoutService/GetWorkout"
	WorkoutService_UpdateWorkout_FullMethodName            = "/workout.WorkoutService/UpdateWorkout"
	WorkoutService_DeleteWorkout_FullMethodName            = "/workout.WorkoutService/DeleteWorkout"
	WorkoutService_ListWorkouts_FullMethodName             = "/workout.WorkoutService/ListWorkouts"
	WorkoutService_GetWorkoutStats_FullMethodName          = "/workout.WorkoutService/GetWorkoutStats"
	WorkoutService_GetHighIntensityWorkouts_FullMethodName = "/workout.WorkoutService/GetHighIntensityWorkouts"
)

// WorkoutServiceClient is the client API for WorkoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkoutServiceClient interface {
	// ワークアウトを作成
	CreateWorkout(ctx context.Context, in *CreateWorkoutRequest, opts ...grpc.CallOption) (*CreateWorkoutResponse, error)
	// ワークアウトを取得
	GetWorkout(ctx context.Context, in *GetWorkoutRequest, opts ...grpc.CallOption) (*GetWorkoutResponse, error)
	// ワークアウトを更新
	UpdateWorkout(ctx context.Context, in *UpdateWorkoutRequest, opts ...grpc.CallOption) (*UpdateWorkoutResponse, error)
	// ワークアウトを削除
	DeleteWorkout(ctx context.Context, in *DeleteWorkoutRequest, opts ...grpc.CallOption) (*DeleteWorkoutResponse, error)
	// ワークアウト一覧を取得
	ListWorkouts(ctx context.Context, in *ListWorkoutsRequest, opts ...grpc.CallOption) (*ListWorkoutsResponse, error)
	// ワークアウト統計を取得
	GetWorkoutStats(ctx context.Context, in *GetWorkoutStatsRequest, opts ...grpc.CallOption) (*GetWorkoutStatsResponse, error)
	// 高強度ワークアウト一覧を取得（ジェネリクス使用例）
	GetHighIntensityWorkouts(ctx context.Context, in *GetHighIntensityWorkoutsRequest, opts ...grpc.CallOption) (*GetHighIntensityWorkoutsResponse, error)
}

type workoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkoutServiceClient(cc grpc.ClientConnInterface) WorkoutServiceClient {
	return &workoutServiceClient{cc}
}

func (c *workoutServiceClient) CreateWorkout(ctx context.Context, in *CreateWorkoutRequest, opts ...grpc.CallOption) (*CreateWorkoutResponse, error) {
	out := new(CreateWorkoutResponse)
	err := c.cc.Invoke(ctx, WorkoutService_CreateWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) GetWorkout(ctx context.Context, in *GetWorkoutRequest, opts ...grpc.CallOption) (*GetWorkoutResponse, error) {
	out := new(GetWorkoutResponse)
	err := c.cc.Invoke(ctx, WorkoutService_GetWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) UpdateWorkout(ctx context.Context, in *UpdateWorkoutRequest, opts ...grpc.CallOption) (*UpdateWorkoutResponse, error) {
	out := new(UpdateWorkoutResponse)
	err := c.cc.Invoke(ctx, WorkoutService_UpdateWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) DeleteWorkout(ctx context.Context, in *DeleteWorkoutRequest, opts ...grpc.CallOption) (*DeleteWorkoutResponse, error) {
	out := new(DeleteWorkoutResponse)
	err := c.cc.Invoke(ctx, WorkoutService_DeleteWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) ListWorkouts(ctx context.Context, in *ListWorkoutsRequest, opts ...grpc.CallOption) (*ListWorkoutsResponse, error) {
	out := new(ListWorkoutsResponse)
	err := c.cc.Invoke(ctx, WorkoutService_ListWorkouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) GetWorkoutStats(ctx context.Context, in *GetWorkoutStatsRequest, opts ...grpc.CallOption) (*GetWorkoutStatsResponse, error) {
	out := new(GetWorkoutStatsResponse)
	err := c.cc.Invoke(ctx, WorkoutService_GetWorkoutStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workoutServiceClient) GetHighIntensityWorkouts(ctx context.Context, in *GetHighIntensityWorkoutsRequest, opts ...grpc.CallOption) (*GetHighIntensityWorkoutsResponse, error) {
	out := new(GetHighIntensityWorkoutsResponse)
	err := c.cc.Invoke(ctx, WorkoutService_GetHighIntensityWorkouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkoutServiceServer is the server API for WorkoutService service.
// All implementations must embed UnimplementedWorkoutServiceServer
// for forward compatibility
type WorkoutServiceServer interface {
	// ワークアウトを作成
	CreateWorkout(context.Context, *CreateWorkoutRequest) (*CreateWorkoutResponse, error)
	// ワークアウトを取得
	GetWorkout(context.Context, *GetWorkoutRequest) (*GetWorkoutResponse, error)
	// ワークアウトを更新
	UpdateWorkout(context.Context, *UpdateWorkoutRequest) (*UpdateWorkoutResponse, error)
	// ワークアウトを削除
	DeleteWorkout(context.Context, *DeleteWorkoutRequest) (*DeleteWorkoutResponse, error)
	// ワークアウト一覧を取得
	ListWorkouts(context.Context, *ListWorkoutsRequest) (*ListWorkoutsResponse, error)
	// ワークアウト統計を取得
	GetWorkoutStats(context.Context, *GetWorkoutStatsRequest) (*GetWorkoutStatsResponse, error)
	// 高強度ワークアウト一覧を取得（ジェネリクス使用例）
	GetHighIntensityWorkouts(context.Context, *GetHighIntensityWorkoutsRequest) (*GetHighIntensityWorkoutsResponse, error)
	mustEmbedUnimplementedWorkoutServiceServer()
}

// UnimplementedWorkoutServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkoutServiceServer struct {
}

func (UnimplementedWorkoutServiceServer) CreateWorkout(context.Context, *CreateWorkoutRequest) (*CreateWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) GetWorkout(context.Context, *GetWorkoutRequest) (*GetWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) UpdateWorkout(context.Context, *UpdateWorkoutRequest) (*UpdateWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) DeleteWorkout(context.Context, *DeleteWorkoutRequest) (*DeleteWorkoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkout not implemented")
}
func (UnimplementedWorkoutServiceServer) ListWorkouts(context.Context, *ListWorkoutsRequest) (*ListWorkoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkouts not implemented")
}
func (UnimplementedWorkoutServiceServer) GetWorkoutStats(context.Context, *GetWorkoutStatsRequest) (*GetWorkoutStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkoutStats not implemented")
}
func (UnimplementedWorkoutServiceServer) GetHighIntensityWorkouts(context.Context, *GetHighIntensityWorkoutsRequest) (*GetHighIntensityWorkoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHighIntensityWorkouts not implemented")
}
func (UnimplementedWorkoutServiceServer) mustEmbedUnimplementedWorkoutServiceServer() {}

// UnsafeWorkoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkoutServiceServer will
// result in compilation errors.
type UnsafeWorkoutServiceServer interface {
	mustEmbedUnimplementedWorkoutServiceServer()
}

func RegisterWorkoutServiceServer(s grpc.ServiceRegistrar, srv WorkoutServiceServer) {
	s.RegisterService(&WorkoutService_ServiceDesc, srv)
}

func _WorkoutService_CreateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).CreateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_CreateWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).CreateWorkout(ctx, req.(*CreateWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_GetWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).GetWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_GetWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).GetWorkout(ctx, req.(*GetWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_UpdateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).UpdateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_UpdateWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).UpdateWorkout(ctx, req.(*UpdateWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_DeleteWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).DeleteWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_DeleteWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).DeleteWorkout(ctx, req.(*DeleteWorkoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_ListWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).ListWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_ListWorkouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).ListWorkouts(ctx, req.(*ListWorkoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_GetWorkoutStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkoutStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).GetWorkoutStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_GetWorkoutStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).GetWorkoutStats(ctx, req.(*GetWorkoutStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkoutService_GetHighIntensityWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHighIntensityWorkoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkoutServiceServer).GetHighIntensityWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkoutService_GetHighIntensityWorkouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkoutServiceServer).GetHighIntensityWorkouts(ctx, req.(*GetHighIntensityWorkoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkoutService_ServiceDesc is the grpc.ServiceDesc for WorkoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workout.WorkoutService",
	HandlerType: (*WorkoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkout",
			Handler:    _WorkoutService_CreateWorkout_Handler,
		},
		{
			MethodName: "GetWorkout",
			Handler:    _WorkoutService_GetWorkout_Handler,
		},
		{
			MethodName: "UpdateWorkout",
			Handler:    _WorkoutService_UpdateWorkout_Handler,
		},
		{
			MethodName: "DeleteWorkout",
			Handler:    _WorkoutService_DeleteWorkout_Handler,
		},
		{
			MethodName: "ListWorkouts",
			Handler:    _WorkoutService_ListWorkouts_Handler,
		},
		{
			MethodName: "GetWorkoutStats",
			Handler:    _WorkoutService_GetWorkoutStats_Handler,
		},
		{
			MethodName: "GetHighIntensityWorkouts",
			Handler:    _WorkoutService_GetHighIntensityWorkouts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/workout.proto",
}
